rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {
    //   allow read, write: if true;
    // }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId
        && request.resource.data.keys().hasOnly(['username', 'photoUrl'])
        && request.resource.data.username is string
        && (request.resource.data.photoUrl is string || request.resource.data.photoUrl == null);
    }

    match /groups/{groupId} {
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.memberUids;
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/groupSettings/$(groupId)).data.inviteKey == request.resource.data.inviteKey;
      allow update: if request.auth.uid in resource.data.memberUids ||
        request.resource.data.inviteKey == get(/databases/$(database)/documents/groupSettings/$(groupId)).data.inviteKey;
    }

    match /groupSettings/{groupId} {
      allow create: if request.auth != null && request.resource.data.keys().hasAll(['inviteKey']);
    }

    match /groupMembers/{docId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.userId
        && docId == request.resource.data.userId + "_" + request.resource.data.groupId
        && get(/databases/$(database)/documents/groupSettings/$(request.resource.data.groupId)).data.inviteKey == request.resource.data.inviteKey;
      allow update: if request.auth.uid == resource.data.userId;
    }
  }
}